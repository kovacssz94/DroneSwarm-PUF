(* Channels *)
free c: channel. (* X <---> TTS *)
free d: channel. (* Follower <---> Leader *)
free e: channel. (* Leader <---> Ground Station *)
free f: channel. (* Public Key broadcast *)

(* Define types for IDs, nonces, messages, and MACs etc. *)
type nonce.
type ID.
type message.
type mac_val.  
type puf_response.
type init_points.
type sym_key.
type ciphertext.
type counter.
type sskey.
type spkey.
type mkey.
type host.

(* Type conversions *)
fun IDToMsg(ID): message.
fun PufToMsg(puf_response): message.

(*Initial events*)
event Drone_Start(ID, nonce, nonce).
event Leader_Forward(ID, nonce, nonce).
(* Events for authentication *) 
event Di_Auth_DL_GS(message, nonce, nonce).
event DL_Auth_Di_GS(message, nonce, nonce).
event GS_Auth_Di_DL(message, ID, nonce, nonce).

(* Define cryptographic functions and primitives *)
fun H(puf_response, nonce): ID. (* generating AID *)
fun compute_mac(ID, puf_response, nonce, nonce): mac_val.(* MAC_i and MAC_L*)
fun compute_mac2(ID, nonce, nonce, mac_val): mac_val.(* MAC_i and MAC_L*)
fun compute_mac_GS(message, ID, puf_response, nonce, message, nonce): mac_val. (* MAC_GS with more values *)
fun compute_mac_L(message, message, message, nonce, nonce): mac_val. (* MAC_L2  *)
fun PUF_response(nonce): puf_response.
fun hash(message, message): message.
fun hash2(init_points, message): message.
fun F(puf_response): message.

(* Queries 
  Drone_Start() <== Leader_Forward() <== GS_Auth_Di_DL()
  GS_Auth_Di_DL() <== DL_Auth_Di_GS() <== Di_Auth_DL_GS() 
*)

(* DEBUG 
free test:bitstring [private].
query attacker(test).*)

query ACK_i: message, ACK_L: ID, ts3: nonce, AID_i: ID, AID_L: ID, ts2: nonce, ts1: nonce, session: nonce; 
  (inj-event(Leader_Forward(AID_i, ts1, session)) ==>
    inj-event(Drone_Start(AID_i, ts1, session))).
(*
query ACK_i: message, ACK_L: ID, ts3: nonce, AID_i: ID, AID_L: ID, ts2: nonce, ts1: nonce, session: nonce; 
  inj-event(GS_Auth_Di_DL(ACK_i, ACK_L, ts3, session)) ==> 
    (inj-event(Leader_Forward(AID_i, AID_L, ts2, session)) ==>
      inj-event(Drone_Start(AID_i, ts1, session))).

 
query ACK_i: message, ACK_L: ID, ts3: nonce, ts4: nonce, Auth_L: message, session: nonce; 
  inj-event(Di_Auth_DL_GS(ACK_i, ts4, session)) ==>
    (inj-event(DL_Auth_Di_GS(Auth_L, ts4, session)) ==>
      inj-event(GS_Auth_Di_DL(ACK_i, ACK_L, ts3, session))).

 
query session: nonce; 
  inj-event(Di_Auth_DL_GS(session)) ==>
    (inj-event(DL_Auth_Di_GS(session)) ==>
      (inj-event(GS_Auth_Di_DL(session)) ==>
        (inj-event(Leader_Forward(session)) ==>
          inj-event(Drone_Start(session))))). *)

table replay_table(nonce, nonce).
table ts1_table(nonce).
table session_table(nonce, nonce).
table old_session_table(nonce). 

(* Drone *)
let drone(Di_Challenge: nonce) =
  let R_i = PUF_response(Di_Challenge) in
  (* Generate session key *)
  new session: nonce;
  new session_key: nonce;
  insert session_table(session_key, session);
  (* SEND message 1 *)
  new ts1: nonce;
  let AID_i = H(R_i, ts1) in
  let MAC_i = compute_mac(AID_i, R_i, ts1, session) in
  let MAC = compute_mac2(AID_i, ts1, session, MAC_i) in
  event Drone_Start(AID_i, ts1, session);
  out(c, (AID_i, MAC_i, ts1, session_key, MAC)).
  

(* Leader *)
let leader(DL_Challenge: nonce) =
  let R_L = PUF_response(DL_Challenge) in
  (* GET message 1 *)
  in(c, (AID_i: ID, MAC_i: mac_val, ts1: nonce, session_key: nonce, MAC: mac_val));
  (* Timestamp validation of message 1 *)
  get replay_table(tsX, session_keyX) suchthat (tsX = ts1 || session_keyX = session_key) in
    0 (* Replay detected — already used *)
  else
    insert replay_table(ts1, session_key); 
    get session_table(=session_key, session) in
    if MAC = compute_mac2(AID_i, ts1, session, MAC_i) then
      get old_session_table(sessionX) suchthat (sessionX = session) in
        0 (* Replay detected — already used *)
      else (
        insert old_session_table(session);
        (* SEND message 2 *)
        new ts2: nonce;
        let AID_L = H(R_L, ts2) in
        let MAC_L = compute_mac(AID_L, R_L, ts2, session) in
        event Leader_Forward(AID_i, ts1, session);
        out(c, (AID_i, MAC_i, AID_L, MAC_L, ts1, ts2, session_key))).
  
process
! new Di_Challenge: nonce;
! new DL_Challenge: nonce;
  (* Launch an unbounded number of sessions of the other 3 participants *)
  !drone(Di_Challenge) |
  !leader(DL_Challenge) 

	