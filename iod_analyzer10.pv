(* Public channel used for communication *)
free c_pub : channel.

(* Define types for IDs, nonces, keys, messages, and MACs *)
type nonce.
type ID.
type key.
type message.
type mac_val.  (* Renamed from mac *)
type timestamp.
type puf_response.
type init_points.

(* Define cryptographic functions and primitives *)
fun H(puf_response, timestamp): ID. (* generating AID *)
fun compute_mac(ID, puf_response, timestamp): mac_val.(* MAC_i and MAC_L*)
fun compute_mac_GS(message, message, puf_response, timestamp, message): mac_val. (* MAC_GS with more values *)
fun compute_mac_L(message, message, timestamp, timestamp, message): mac_val. (* MAC_L2  *)
fun PUF_response(nonce): puf_response.
fun hash(message, message): message.
fun fst(message): message.
fun snd(message): message.
fun actualTime(): timestamp.
fun f(puf_response): message.

(* Type conversions *)
fun MsgToKey(message): key.
fun MsgToNonce(message): nonce.
fun MsgToID(message): ID.
fun MsgToMac_val(message): mac_val.
fun MsgToPuf_resp(message): puf_response.
fun MsgToTime(message): timestamp.
fun KeyToNonce(key): nonce.
fun KeyToMsg(key): message.
fun KeyToPuf_resp(key): puf_response.
fun NonceToMsg(nonce): message.
fun IDtoNonce(ID): nonce.
fun IDtoKey(ID): key.
fun IDtoMsg(ID): message.
fun mac_valToNonce(mac_val): nonce.
fun mac_valToMsg(mac_val): message.
fun PufToKey(puf_response): key.
fun PufToMsg(puf_response): message.
fun tsTononce(timestamp): nonce.
fun tsToID(timestamp): ID.
fun tsToMessage(timestamp): message.
fun PointsToMsg(init_points): message.


(*Initial events*)
event Drone_Start().
event Leader_Forward().
(* Events for authentication *) 
event Di_Auth_DL_GS(puf_response, message, message).
event DL_Auth_Di_GS(puf_response, message, message).
event GS_Auth_Di_DL(message, message).
(* Timestamp validation *)
event TiSent(timestamp).
event TiReceived(timestamp).
event TLSent(timestamp).
event TLReceived(timestamp).
event TGSSent(timestamp).
event TGSReceived(timestamp).
event TL2Sent(timestamp).
event TL2Received(timestamp).
(* Events for message integrity *)
event Msg_Integrity_i(message).
event Msg_Integrity_L(message).
event Msg_Integrity_GS(message).
event Msg_Integrity_L2(message).

(*
DEBUG
free test:bitstring [private].
query attacker(test).
*)

(*

Drone_Start() ==> Leader_Forward() ==> GS_Auth_Di_DL()
GS_Auth_Di_DL() ==> DL_Auth_Di_GS() ==> Di_Auth_DL_GS()

*)

(*GS check integrity of drone's and leader's messages*)
query MAC_i: message, MAC_L: message, T_i: timestamp, T_L:timestamp; 
  inj-event(Msg_Integrity_i(MAC_i)) && inj-event(Msg_Integrity_GS(MAC_L)) ==> 
    (inj-event(TLReceived(T_L)) ==> 
      (inj-event(TiReceived(T_i)) ==> 
        (inj-event(TLSent(T_L)) ==>
          (inj-event(TiSent(T_i)) ==>
            inj-event(Leader_Forward()))))).

(*GS authenticates Di and DL*)
query AID_i: message, AID_L: message, MAC_i: message, MAC_L: message; 
  inj-event(GS_Auth_Di_DL(AID_i, AID_L)) ==> 
    inj-event(Msg_Integrity_i(MAC_i)) && inj-event(Msg_Integrity_GS(MAC_L)).

(*DL check integrity of GS's message*)
query MAC_GS: message, AID_i: message, AID_L: message, T_GS: timestamp; 
  inj-event(Msg_Integrity_GS(MAC_GS)) ==> 
    (inj-event(TGSReceived(T_GS)) ==>
      (inj-event(TGSSent(T_GS)) ==>
        inj-event(GS_Auth_Di_DL(AID_i, AID_L)))).

(*DL authenticates GS, therefore Di is valid if GS sent valid messages*)
query MAC_GS: message, R_L: puf_response, T_GS: message, ACK_L: message; 
  inj-event(DL_Auth_Di_GS(R_L, T_GS, ACK_L)) ==> 
    inj-event(Msg_Integrity_GS(MAC_GS)).

(*Di check integrity of DL 2nd message and authenticates DL and GS*)
query MAC_L2: message, R_L: puf_response, T_GS: message, ACK_L: message, R_i: puf_response, T_L2: timestamp, ACK_i: message, Auth_L: message; 
  inj-event(Di_Auth_DL_GS(R_i, ACK_i, Auth_L)) ==>
    (inj-event(TL2Received(T_L2)) ==>
        (inj-event(TL2Sent(T_L2)) ==>
          (inj-event(Msg_Integrity_L2(MAC_L2)) ==> 
            (inj-event(DL_Auth_Di_GS(R_L, T_GS, ACK_L)))))).

(* Drone Process - start  *)
let drone_start(Di_Challenge: nonce) =
  let R_i = PUF_response(Di_Challenge) in
  let T_i = actualTime() in
  let AID_i = H(R_i, T_i) in
  let MAC_i = compute_mac(AID_i, R_i, T_i) in
  out(c_pub, (AID_i, T_i, MAC_i));
  event TiSent(T_i);
  event Drone_Start().

(* Leader Drone Process - Forward *)
let leader_first(DL_Challenge: nonce) =
  let R_L = PUF_response(DL_Challenge) in 
  let T_L = actualTime() in
  let AID_L = H(R_L, T_L) in
  in(c_pub, received_msg: message);
  let AID_i = fst(received_msg) in
  let rest1 = snd(received_msg) in
  let T_i = fst(rest1) in
  event TiReceived(MsgToTime(T_i));
  let MAC_i = snd(rest1) in
  if (* Timestamp validation coming here *) T_i = T_i then
    let MAC_L = compute_mac(AID_L, R_L, T_L) in
    out(c_pub, (AID_i, T_i, MAC_i, AID_L, T_L, MAC_L));
    event TLSent(T_L);
    event Leader_Forward().

(* Ground Station Process - Authentication *)
let ground_station(R_i: puf_response, R_L: puf_response, Points: init_points) =
  let T_GS = actualTime() in
  in(c_pub, received_msg: message);
  let AID_i = fst(received_msg) in
  let rest1 = snd(received_msg) in
  let T_i = fst(rest1) in
  let rest2 = snd(rest1) in
  let MAC_i = fst(rest2) in
  let rest3 = snd(rest2) in
  let AID_L = fst(rest3) in
  let rest4 = snd(rest3) in
  let T_L = fst(rest4) in
  event TLReceived(MsgToTime(T_L));
  let MAC_L = snd(rest4) in
  (* Verify both MACs before proceeding *)
  if compute_mac(MsgToID(AID_i), R_i, MsgToTime(T_i)) = MsgToMac_val(MAC_i) && compute_mac(MsgToID(AID_L), R_L, MsgToTime(T_L)) = MsgToMac_val(MAC_L) then
    event Msg_Integrity_i(MAC_i);
    event Msg_Integrity_L(MAC_L);
    if MsgToID(AID_i) = H(R_i, MsgToTime(T_i)) && MsgToID(AID_L) = H(R_L, MsgToTime(T_L)) then
      let ACK_L = hash(AID_L, tsToMessage(T_GS)) in
      let ACK_i = hash(AID_i, ACK_L) in
      let Y_i = f(R_i) in
      let Msg_GS = hash(PointsToMsg(Points), Y_i) in
      let MAC_GS = compute_mac_GS(ACK_i, ACK_L, R_L, T_GS, Msg_GS) in
      out(c_pub, (ACK_i, ACK_L, T_GS, Msg_GS, MAC_GS));
      event TGSSent(T_GS);
      event GS_Auth_Di_DL(AID_i, AID_L).

(* Leader Drone Process - Authentication *)
let leader_auth(DL_Challenge: nonce) =
  let R_L = PUF_response(DL_Challenge) in
  let T_L2 = actualTime() in
  in(c_pub, received_msg: message);
  let ACK_i = fst(received_msg) in
  let rest1 = snd(received_msg) in
  let ACK_L = fst(rest1) in
  let rest2 = snd(rest1) in
  let T_GS = fst(rest2) in
  event TGSReceived(MsgToTime(T_GS));
  let rest3 = snd(rest2) in
  let M_GS = fst(rest3) in
  let MAC_GS = snd(rest3) in
  if compute_mac_GS(ACK_i, ACK_L, R_L, MsgToTime(T_GS), M_GS) = MsgToMac_val(MAC_GS) && MsgToID(ACK_L) = H(R_L, MsgToTime(T_GS)) then
  (* Timestamp validation coming here*)
    event Msg_Integrity_GS(MAC_GS);
    let Auth_L = hash(PufToMsg(R_L), ACK_L) in
    let MAC_L2 = compute_mac_L(Auth_L, ACK_i, MsgToTime(T_GS), T_L2, M_GS) in
    out(c_pub, (Auth_L, ACK_i, T_GS, T_L2, M_GS, MAC_L2));
    event TL2Sent(T_L2);
    event DL_Auth_Di_GS(R_L, T_GS, ACK_L).

(* Drone Process - Authentication *)
let drone_auth(Di_Challenge: nonce) =
  let R_i = PUF_response(Di_Challenge) in 
  in(c_pub, received_msg: message);
  let Auth_L = fst(received_msg) in
  let rest1 = snd(received_msg) in
  let ACK_i = fst(rest1) in
  let rest2 = snd(rest1) in
  let T_GS = fst(rest2) in
  let rest3 = snd(rest2) in
  let T_L2 = fst(rest3) in
  event TL2Received(MsgToTime(T_L2));
  let rest4 = snd(rest3) in
  let M_GS = fst(rest4) in
  let MAC_L2 = snd(rest4) in
  if compute_mac_L(Auth_L, ACK_i, MsgToTime(T_GS), MsgToTime(T_L2), M_GS) = MsgToMac_val(MAC_L2) then
    event Msg_Integrity_L2(MAC_L2);
    event Di_Auth_DL_GS(R_i, ACK_i, Auth_L).

(* Swarm Initialization Process *)
process
  new Di_Challenge: nonce;
  new DL_Challenge: nonce;
  new R_i: puf_response; 
  new R_L: puf_response; 
  new Points: init_points;
  (
    !drone_start(Di_Challenge) |
    !leader_first(DL_Challenge) |
    !ground_station(R_i, R_L, Points) |
    !leader_auth(DL_Challenge) |
    !drone_auth(Di_Challenge)
  )
