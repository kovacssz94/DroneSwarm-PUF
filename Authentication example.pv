free c : channel.

free s : bitstring [private].

type host.
type nonce.
type pkey.
type skey.
type spkey.
type sskey.
type key.

(* Public key encryption *)
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; adec(aenc(x,pk(y)),y) = x.

(* Signatures *)
fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m: bitstring, k: sskey; getmess(sign(m,k)) = m.
reduc forall m: bitstring, k: sskey; checksign(sign(m,k), spk(k)) = m.

(* Shared key encryption *)
fun senc(bitstring,key): bitstring.
reduc forall x: bitstring, y: key; sdec(senc(x,y),y) = x.

query attacker (s).

event acceptsClient ( key ) .
event acceptsServer ( key , pkey ) .
event termClient ( key , pkey ) .
event termServer ( key ) .

 query x : key , y : pkey ; event (termClient(x , y)) ==> event (acceptsServer (x , y ) ) .
 query x : key ; inj-event (termServer(x)) ==> inj-event ( acceptsClient ( x ) ) .

 let clientA (pkA: pkey , skA : skey , pkB: spkey ) =
 out ( c , pkA) ;
 in ( c , x : bitstring ) ;
 let y = adec (x , skA) in
 let (=pkB, k : key ) = checksign (y , pkB) in
 event acceptsClient ( k ) ;
 out ( c , senc ( s , k ) ) ;
 event termClient (k , pkA) .

 let serverB(pkB: spkey, skB: sskey , pkA: pkey ) =
 in ( c , pkX: pkey ) ;
 new k : key ;
 event acceptsServer (k , pkX) ;
 out ( c , aenc ( sign ( ( pkB, k ) , skB) ,pkX) ) ;
 in ( c , x : bitstring ) ;
 let z = sdec (x , k ) in
 if pkX = pkA then event termServer ( k ) .

 process
 new skA : skey ;
 new skB : sskey ;
 let pkA = pk ( skA) in out ( c , pkA) ;
 let pkB = spk ( skB) in out ( c , pkB ) ;
 ( ( ! clientA(pkA, skA , pkB) ) | ( ! serverB (pkB, skB , pkA) ) )