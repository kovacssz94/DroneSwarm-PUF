(* Channels *)
free a: channel. (* Follower <---> TTS *)
free b: channel. (* Leader <---> TTS *)
free c: channel. (* Ground Station <---> TTS *)
free d: channel. (* Follower <---> Leader *)
free e: channel. (* Leader <---> Ground Station *)
free f: channel. (* Public Key broadcast *)

(* Define types for IDs, nonces, messages, and MACs etc. *)
type nonce.
type ID.
type key.
type message.
type mac_val.  
type timestamp.
type puf_response.
type init_points.
type sym_key.
type ciphertext.
type counter.
type sskey.
type spkey.
type mkey.

(* Type conversions *)
fun IDToMsg(ID): message.
fun PufToMsg(puf_response): message.

(*Initial events*)
event Drone_Start(counter).
event Leader_Forward(counter).
(* Events for authentication *) 
event Di_Auth_DL_GS(counter).
event DL_Auth_Di_GS(counter).
event GS_Auth_Di_DL(counter).

(* Define cryptographic functions and primitives *)
fun H(puf_response, counter): ID. (* generating AID *)
fun compute_mac(ID, puf_response, counter): mac_val.(* MAC_i and MAC_L*)
fun compute_mac2(ID, mac_val, nonce, mkey): mac_val.
fun compute_mac3(ID, mac_val, ID, mac_val, nonce, mkey): mac_val.
fun compute_mac_GS(message, ID, puf_response, counter, mkey, message, nonce): mac_val. (* MAC_GS with more values *)
fun compute_mac_L(message, message, message, nonce, mkey): mac_val. (* MAC_L2  *)
fun PUF_response(nonce): puf_response.
fun hash(message, message): message.
fun hash2(init_points, message): message.
fun F(puf_response): message.

(* Digital Signature *)
fun spk(sskey): spkey.
fun sign(counter,sskey): bitstring.
reduc forall m: counter, ssk: sskey; checksign(sign(m, ssk), spk(ssk)) = m.

fun sign2(nonce, sskey): bitstring.
reduc forall m: nonce, ssk: sskey; checksign2(sign2(m, ssk), spk(ssk)) = m.

(* Symmetric encryption *)
type skey.

fun senc(counter, skey): bitstring.
reduc forall K: skey, M: counter; sdec(senc(M,K), K) = M.

fun senc2(nonce, skey): bitstring.
reduc forall K: skey, M: nonce; sdec2(senc2(M,K), K) = M.

(* Queries 
  Drone_Start() <== Leader_Forward() <== GS_Auth_Di_DL()
  GS_Auth_Di_DL() <== DL_Auth_Di_GS() <== Di_Auth_DL_GS() 
*)

(* DEBUG 
free test:bitstring [private].
query attacker(test).*)

query ctr: counter; 
  inj-event(GS_Auth_Di_DL(ctr)) ==> 
    (inj-event(Leader_Forward(ctr)) ==>
      inj-event(Drone_Start(ctr))).

(* 
query ctr: counter; 
  inj-event(Di_Auth_DL_GS(ctr)) ==>
    (inj-event(DL_Auth_Di_GS(ctr)) ==>
      inj-event(GS_Auth_Di_DL(ctr))).

 
query ctr: counter; 
  inj-event(Di_Auth_DL_GS(ctr)) ==>
    (inj-event(DL_Auth_Di_GS(ctr)) ==>
      (inj-event(GS_Auth_Di_DL(ctr)) ==>
        (inj-event(Leader_Forward(ctr)) ==>
          inj-event(Drone_Start(ctr))))). *)


(*Trusted TS generator*)
let ts(sign_key: sskey, se_key: skey) =
  new sec_ctr: counter;
  in (a,enc_sec_ctr_d: bitstring);
  in (b,enc_sec_ctr_l: bitstring);
  in (c,enc_sec_ctr_gs: bitstring); 
  let sec_ctr_d = sdec(enc_sec_ctr_d, se_key) in
  out (a, (sign(sec_ctr_d, sign_key), senc(sec_ctr, se_key)));
  let sec_ctr_l = sdec(enc_sec_ctr_l, se_key) in
  out (b, (sign(sec_ctr_l, sign_key), senc(sec_ctr, se_key)));
  let sec_ctr_gs = sdec(enc_sec_ctr_gs, se_key) in
  out (c, (sign(sec_ctr_gs, sign_key), senc(sec_ctr, se_key)));
  (* Drone to Leader*)
  new ts1: nonce;
  in (a, enc_ts1_d: bitstring);
  let ts1_d = sdec2(enc_ts1_d, se_key) in
  out (a, (sign2(ts1_d, sign_key), senc2(ts1, se_key)));
  in (b, enc_ts1_l: bitstring);
  let ts1_l = sdec2(enc_ts1_l, se_key) in
  out (b, (sign2(ts1_l, sign_key), senc2(ts1, se_key)));
  (* Leader to Ground station *)
  new ts2: nonce;
  in (b, enc_ts2_d: bitstring);
  let ts2_l = sdec2(enc_ts2_d, se_key) in
  out (b, (sign2(ts2_l, sign_key), senc2(ts2, se_key)));
  in (c, enc_ts2_l: bitstring);
  let ts2_gs = sdec2(enc_ts2_l, se_key) in
  out (c, (sign2(ts2_gs, sign_key), senc2(ts2, se_key)));
  (* Ground station to Leader*)
  new ts3: nonce;
  in (c, enc_ts3_d: bitstring);
  let ts3_gs = sdec2(enc_ts3_d, se_key) in
  out (c, (sign2(ts3_gs, sign_key), senc2(ts3, se_key)));
  in (b, enc_ts3_l: bitstring);
  let ts3_l = sdec2(enc_ts3_l, se_key) in
  out (b, (sign2(ts3_l, sign_key),senc2(ts3, se_key)));
  (* Leader to Drone*)
  new ts4: nonce;
  in (b, enc_ts4_d: bitstring);
  let ts4_l = sdec2(enc_ts4_d, se_key) in
  out (b, (sign2(ts4_l, sign_key), senc2(ts4, se_key)));
  in (a, enc_ts4_l: bitstring);
  let ts4_d = sdec2(enc_ts4_l, se_key) in
  out (a, (sign2(ts4_d, sign_key), senc2(ts3, se_key))).


(* Drone *)
let drone(m_key: mkey, se_key: skey, Di_Challenge: nonce) =
  (* GET timestamp *)
  new ctr: counter;
  out(a, senc(ctr, se_key));
  in(f, pk: spkey); 
  in(a, (iiii: bitstring, enc_ctr_new: bitstring));
  let ctr_new = sdec(enc_ctr_new, se_key) in
  if ctr = checksign(iiii, pk) then

  (* Drone start *)
  let R_i = PUF_response(Di_Challenge) in
  (* GET ts1 *)
  new challenge1: nonce;
  out(a, senc2(challenge1, se_key));
  in(a, (iiii1: bitstring, enc_ts1: bitstring));
  let ts1 = sdec2(enc_ts1, se_key) in
  if challenge1 = checksign2(iiii1, pk) then
    (* SEND message 1 *)
    let AID_i = H(R_i, ctr_new) in
    let MAC_i = compute_mac(AID_i, R_i, ctr_new) in
    let MAC = compute_mac2(AID_i, MAC_i, ts1, m_key) in
    out(d, (AID_i, MAC_i, MAC));
    event Drone_Start(ctr_new);

  (* Drone finish *)
  (* GET ts4 *)
  new challenge4: nonce;
  out(a, senc2(challenge4, se_key));
  in(a, (iiii4: bitstring, enc_ts4: bitstring));
  let ts4 = sdec2(enc_ts4, se_key) in
  if challenge4 = checksign2(iiii4, pk) then
    (* GET message 4 *)
    in(d, (Auth_L: message, ACK_i: message, Msg_GS: message, MAC_L2: mac_val));
    (* Timestamp + MAC validation *)
    if compute_mac_L(Auth_L, ACK_i, Msg_GS, ts4, m_key) = MAC_L2 then 
      (* Authenticate DL and GS *)
      if ACK_i = hash(PufToMsg(R_i), Auth_L) then 
        event Di_Auth_DL_GS(ctr_new).

(* Leader *)
let leader(m_key: mkey, se_key: skey, DL_Challenge: nonce) =
  (* GET timestamp *)
  new ctr: counter;
  out(b, senc(ctr, se_key));
  in(f, pk: spkey); 
  in(b, (iiii: bitstring, enc_ctr_new: bitstring));
  let ctr_new = sdec(enc_ctr_new, se_key) in
  if ctr = checksign(iiii, pk) then
    
    (* Leader forward *)
    let R_L = PUF_response(DL_Challenge) in
    (* GET ts1 *)
    new challenge1: nonce;
    out(b, senc2(challenge1, se_key));
    in(b, (iiii1: bitstring, enc_ts1: bitstring));
    let ts1 = sdec2(enc_ts1, se_key) in
    if challenge1 = checksign2(iiii1, pk) then 
      (* GET message 1 *)
      in(d, (AID_i: ID, MAC_i: mac_val, MAC: mac_val));
      (* Timestamp + MAC validation of message 1 *)
      if MAC = compute_mac2(AID_i, MAC_i, ts1, m_key) then  
        (* GET ts2 *)
        new challenge2: nonce;
        out(b, senc2(challenge2, se_key));
        in(b, (iiii2: bitstring, enc_ts2: bitstring));
        let ts2 = sdec2(enc_ts2, se_key) in
        if challenge2 = checksign2(iiii2, pk) then 
          (* SEND message 2 *)
          let AID_L = H(R_L, ctr_new) in
          let MAC_L = compute_mac(AID_L, R_L, ctr_new) in
          let MAC = compute_mac3(AID_i, MAC_i, AID_L, MAC_L, ts2, m_key) in
          out(e, (AID_i, MAC_i, AID_L, MAC_L, MAC));
          event Leader_Forward(ctr_new);
    
    (* Leader auth *)
    (*GET ts3 *)
    new challenge3: nonce;
    out(b, senc2(challenge3, se_key));
    in(b, (iiii3: bitstring, enc_ts3: bitstring));
    let ts3 = sdec2(enc_ts3, se_key) in
    if challenge3 = checksign2(iiii3, pk) then
      (* GET message 3 *)
      in(e, (ACK_i: message, ACK_L: ID, Msg_GS: message, MAC_GS: mac_val));
      (* Timestamp + MAC verification *)
      if compute_mac_GS(ACK_i, ACK_L, R_L, ctr_new, m_key, Msg_GS, ts3) = MAC_GS then 
        (* Authenticate Di and GS *)
        if ACK_L = H(R_L, ctr_new) then 
          (* GET ts4 *)
          new challenge4: nonce;
          out(b, senc2(challenge4, se_key));
          in(b, (iiii4: bitstring, enc_ts4: bitstring));
          let ts4 = sdec2(enc_ts4, se_key) in
          if challenge4 = checksign2(iiii4, pk) then
            (* SEND message 4 *)
            let Auth_L = hash(PufToMsg(R_L), IDToMsg(ACK_L)) in
            let MAC_L2 = compute_mac_L(Auth_L, ACK_i, Msg_GS, ts4, m_key) in
            out(d, (Auth_L, ACK_i, Msg_GS, MAC_L2));
            event DL_Auth_Di_GS(ctr_new).

(* Ground Station *)
let ground_station(m_key: mkey,se_key: skey, Di_Challenge: nonce, DL_Challenge: nonce, Points: init_points) =
  (* GET timestamp *)
  new sec_ctr: counter;
  out(c, senc(sec_ctr, se_key));
  in(f, pk:spkey);
  in(c,(iiii:bitstring,enc_ctr_new:bitstring));
  let ctr_new = sdec(enc_ctr_new, se_key) in
  if sec_ctr = checksign(iiii, pk) then 

    (* Ground Station authenticates*)
    let R_i = PUF_response(Di_Challenge) in
    let R_L = PUF_response(DL_Challenge) in
    (* GET ts2 *)
    new challenge2: nonce;
    out(c, senc2(challenge2, se_key));
    in(c, (iiii2: bitstring, enc_ts2: bitstring));
    let ts2 = sdec2(enc_ts2, se_key) in
    if challenge2 = checksign2(iiii2, pk) then 
      (* GET message 2 *)
      in(e, (AID_i: ID, MAC_i: mac_val, AID_L: ID, MAC_L: mac_val, MAC: mac_val));
      (* Timestamp + MAC validation *)
      if MAC = compute_mac3(AID_i, MAC_i, AID_L, MAC_L, ts2, m_key) then  
        (* Di and DL authentication *)
        if compute_mac(AID_i, R_i, ctr_new) = MAC_i && compute_mac(AID_L, R_L, ctr_new) = MAC_L then 
        if AID_i = H(R_i, ctr_new) && AID_L = H(R_L, ctr_new) then 
          (* GET ts3 *)
          new challenge3: nonce;
          out(c, senc2(challenge3, se_key));
          in(c, (iiii3: bitstring, enc_ts3: bitstring));
          let ts3 = sdec2(enc_ts3, se_key) in
          if challenge3 = checksign2(iiii3, pk) then
            (* SEND message 3 *)
            let ACK_L = H(R_L, ctr_new) in
            let ACK_i = hash(PufToMsg(R_i), hash(PufToMsg(R_L), IDToMsg(ACK_L))) in
            let Y_i = F(R_i) in
            let Msg_GS = hash2(Points, Y_i) in
            let MAC_GS = compute_mac_GS(ACK_i, ACK_L, R_L, ctr_new, m_key, Msg_GS, ts3) in
            out(e, (ACK_i, ACK_L, Msg_GS, MAC_GS));
            event GS_Auth_Di_DL(ctr_new).

process
new senc_key: skey;
new mac_key: mkey;
new ss: sskey;
new Di_Challenge: nonce;
new DL_Challenge: nonce;
new Points: init_points;
out(f, spk(ss));
 !ts(ss, senc_key) | 
 !ground_station(mac_key, senc_key, Di_Challenge, DL_Challenge, Points) | 
 !leader(mac_key, senc_key, DL_Challenge) |
 !drone(mac_key, senc_key, Di_Challenge)

	