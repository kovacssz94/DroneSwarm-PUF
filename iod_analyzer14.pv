(* Public channel used for communication *)
free c_pub : channel.

(* Define types for IDs, nonces, messages, MACs, counters, etc. *)
type nonce.
type ID.
type key.
type message.
type mac_val.  
type counter.
type puf_response.
type init_points.

(* Define cryptographic functions and primitives *)
fun H(puf_response, counter): ID. (* generating AID *)
fun compute_mac(ID, puf_response, counter): mac_val. (* MAC_i and MAC_L *)
fun compute_mac2(ID, counter, mac_val): mac_val.
fun compute_mac_GS(message, ID, puf_response, counter, message): mac_val. (* MAC_GS with more values *)
fun compute_mac_L(message, message, counter, counter, message): mac_val. (* MAC_L2 *)
fun PUF_response(nonce): puf_response [private].
fun hash(message, message): message.
fun hash2(init_points, message): message.
fun f(puf_response): message.

(* Type conversions *)
fun IDToMsg(ID): message.
fun MsgToID(message): ID.
fun MsgToMac_val(message): mac_val.
fun MsgToCounter(message): counter.
fun PufToMsg(puf_response): message.
fun CounterToMessage(counter): message.
fun PointsToMsg(init_points): message.

(* Initial events *)
event Drone_Start().
event Leader_Forward().
(* Events for authentication *) 
event Di_Auth_DL_GS(puf_response, message, message).
event DL_Auth_Di_GS(puf_response, counter, ID).
event GS_Auth_Di_DL(ID, ID).

(* Queries *)
query AID_i: ID, AID_L: ID; 
  inj-event(GS_Auth_Di_DL(AID_i, AID_L)) ==> 
    (inj-event(Leader_Forward()) ==>
      inj-event(Drone_Start())).

query R_L: puf_response, ctr_GS: counter, ACK_L: ID, R_i: puf_response, ACK_i: message, Auth_L: message, AID_i: ID, AID_L: ID; 
  inj-event(Di_Auth_DL_GS(R_i, ACK_i, Auth_L)) ==>
    (inj-event(DL_Auth_Di_GS(R_L, ctr_GS, ACK_L)) ==>
      inj-event(GS_Auth_Di_DL(AID_i, AID_L))).

query R_L: puf_response, ctr_GS: counter, ACK_L: ID, R_i: puf_response, ACK_i: message, Auth_L: message, AID_i: ID, AID_L: ID; 
  inj-event(Di_Auth_DL_GS(R_i, ACK_i, Auth_L)) ==>
    (inj-event(DL_Auth_Di_GS(R_L, ctr_GS, ACK_L)) ==>
      (inj-event(GS_Auth_Di_DL(AID_i, AID_L)) ==>
        (inj-event(Leader_Forward()) ==>
          inj-event(Drone_Start())))).

(* Drone Process - start *)
let drone_start(Di_Challenge: nonce, ctr_L: counter) =
  let R_i = PUF_response(Di_Challenge) in
  let ctr_L = ctr_L + 1 in
  let AID_i = H(R_i, ctr_L) in
  let MAC_i = compute_mac(AID_i, R_i, ctr_L) in
  let MAC = compute_mac2(AID_i, ctr_L, MAC_i) in
  out(c_pub, (AID_i, ctr_L, MAC_i, MAC));
  event Drone_Start().

(* Leader Drone Process - Forward *)
let leader_first(DL_Challenge: nonce, ctr_L_L: counter) =
  let R_L = PUF_response(DL_Challenge) in 
  let ctr_L_L = ctr_L_L + 1 in
  let AID_L = H(R_L, ctr_L_L) in
  in(c_pub, (AID_i: ID, ctr_L: counter, MAC_i: mac_val, MAC: mac_val));
  if (ctr_L > ctr_L_L) && (compute_mac2(AID_i, ctr_L, MAC_i) = MAC) then  
    let ctr_L_L = ctr_L in
    let MAC_L = compute_mac(AID_L, R_L, ctr_L_L) in
    out(c_pub, (AID_i, ctr_L, MAC_i, AID_L, ctr_L_L, MAC_L));
    event Leader_Forward().

(* Ground Station Process - Authentication *)
let ground_station(Di_Challenge: nonce, DL_Challenge: nonce, Points: init_points, ctr_L_GS: counter) =
  let R_i = PUF_response(Di_Challenge) in
  let R_L = PUF_response(DL_Challenge) in
  let ctr_L_GS = ctr_L_GS + 1 in
  in(c_pub, (AID_i: ID, ctr_L: counter, MAC_i: mac_val, AID_L: ID, ctr_L_L: counter, MAC_L: mac_val));
  if (ctr_L > ctr_L_GS) && (compute_mac(AID_i, R_i, ctr_L) = MAC_i) then
    if (AID_i = H(R_i, ctr_L)) && (AID_L = H(R_L, ctr_L_L)) then
      let ACK_L = H(R_L, ctr_L_GS) in
      let ACK_i = hash(PufToMsg(R_i), hash(PufToMsg(R_L), IDToMsg(ACK_L))) in
      let Y_i = f(R_i) in
      let Msg_GS = hash2(Points, Y_i) in
      let MAC_GS = compute_mac_GS(ACK_i, ACK_L, R_L, ctr_L_GS, Msg_GS) in
      out(c_pub, (ACK_i, ACK_L, ctr_L_GS, Msg_GS, MAC_GS));
      event GS_Auth_Di_DL(AID_i, AID_L).

(* Leader Drone Process - Authentication *)
let leader_auth(DL_Challenge: nonce, ctr_L_L: counter) =
  let R_L = PUF_response(DL_Challenge) in
  let ctr_L_L = ctr_L_L + 1 in
  in(c_pub, (ACK_i: message, ACK_L: ID, ctr_L_GS: counter, Msg_GS: message, MAC_GS: mac_val));
  if (compute_mac_GS(ACK_i, ACK_L, R_L, ctr_L_GS, Msg_GS) = MAC_GS) && (ACK_L = H(R_L, ctr_L_GS)) then
    let Auth_L = hash(PufToMsg(R_L), IDToMsg(ACK_L)) in
    let MAC_L2 = compute_mac_L(Auth_L, ACK_i, ctr_L_GS, ctr_L_L, Msg_GS) in
    out(c_pub, (Auth_L, ACK_i, ctr_L_GS, ctr_L_L, Msg_GS, MAC_L2));
    event DL_Auth_Di_GS(R_L, ctr_L_GS, ACK_L).

(* Drone Process - Authentication *)
let drone_auth(Di_Challenge: nonce, ctr_L: counter) =
  let R_i = PUF_response(Di_Challenge) in 
  in(c_pub, (Auth_L: message, ACK_i: message, ctr_L_GS: counter, ctr_L_L: counter, Msg_GS: message, MAC_L2: mac_val));
  if compute_mac_L(Auth_L, ACK_i, ctr_L_GS, ctr_L_L, Msg_GS) = MAC_L2 then
    if ACK_i = hash(PufToMsg(R_i), Auth_L) then
      event Di_Auth_DL_GS(R_i, ACK_i, Auth_L).

(* Swarm Initialization Process *)
process
  new Di_Challenge: nonce;
  new DL_Challenge: nonce;
  new Points: init_points;
  new ctr_L: counter;
  new ctr_L_L: counter;
  new ctr_L_GS: counter;
  (
    !drone_start(Di_Challenge, ctr_L) |
    !leader_first(DL_Challenge, ctr_L_L) |
    !ground_station(Di_Challenge, DL_Challenge, Points, ctr_L_GS) |
    !leader_auth(DL_Challenge, ctr_L_L) |
    !drone_auth(Di_Challenge, ctr_L)
  )
