(* Public channel used for communication *)
free c_pub: channel.
free c_sec: channel [private].

(* Define types for IDs, nonces, messages, and MACs etc. *)
type nonce.
type ID.
type key.
type message.
type mac_val.  
type timestamp.
type puf_response.
type init_points.

(* Define cryptographic functions and primitives *)
fun H(puf_response, nonce): ID. (* generating AID *)
fun compute_mac(ID, puf_response, nonce): mac_val.(* MAC_i and MAC_L*)
fun compute_mac_GS(message, ID, puf_response, nonce, message): mac_val. (* MAC_GS with more values *)
fun compute_mac_L(message, message, nonce, nonce, message): mac_val. (* MAC_L2  *)
fun PUF_response(nonce): puf_response.
fun hash(message, message): message.
fun hash2(init_points, message): message.
fun hTime(nonce): message.
fun fst(message): message.
fun snd(message): message.
fun f(puf_response): message.
fun actualTime(): nonce.

(* Type conversions *)
fun IDToMsg(ID): message.
fun MsgToID(message): ID.
fun MsgToMac_val(message): mac_val.
fun MsgToTime(message): timestamp.
fun PufToMsg(puf_response): message.
fun tsToMessage(timestamp): message.
fun PointsToMsg(init_points): message.

(*Initial events*)
event Drone_Start().
event Leader_Forward().
(* Events for authentication *) 
event Di_Auth_DL_GS(puf_response, message, message).
event DL_Auth_Di_GS(puf_response, nonce, ID).
event GS_Auth_Di_DL(ID, ID).

(* DEBUG 
free test:bitstring [private].
query attacker(test).*)

(* Queries 
  Drone_Start() <== Leader_Forward() <== GS_Auth_Di_DL()
  GS_Auth_Di_DL() <== DL_Auth_Di_GS() <== Di_Auth_DL_GS() 
*)

query AID_i: ID, AID_L: ID; 
    (inj-event(Leader_Forward()) ==>
      inj-event(Drone_Start())).

(* Drone Process - start  *)
let drone_start(Di_Challenge: nonce) =
  let R_i = PUF_response(Di_Challenge) in
  new T_i: nonce;
  let hT_i = hTime(T_i) in
  let AID_i = H(R_i, T_i) in
  let MAC_i = compute_mac(AID_i, R_i, T_i) in
  out(c_pub, (AID_i, hT_i, MAC_i));
  event Drone_Start().

(* Leader Drone Process - Forward *)
let leader_first(DL_Challenge: nonce) =
  let R_L = PUF_response(DL_Challenge) in 
  new T_L: nonce;
  let hT_L = hTime(T_L) in
  let AID_L = H(R_L, T_L) in
  in(c_pub, (AID_i: ID, hT_i: message, MAC_i: mac_val));
  (* Timestamp validation *)
    let MAC_L = compute_mac(AID_L, R_L, T_L) in
    out(c_pub, (AID_i, hT_i, MAC_i, AID_L, hT_L, MAC_L));
    event Leader_Forward().

(* Swarm Initialization Process *)
process
  new Di_Challenge: nonce;
  new DL_Challenge: nonce;
  new Points: init_points;
  (
    !drone_start(Di_Challenge) |
    !leader_first(DL_Challenge) 
  )
